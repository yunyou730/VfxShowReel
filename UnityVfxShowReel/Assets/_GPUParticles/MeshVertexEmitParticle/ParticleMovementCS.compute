#pragma kernel CSMoveToMeshVertex
#pragma kernel CSUpdate

RWTexture2D<float4> Result;

struct Particle
{
    float3 Position;
    float3 Velocity;
    float Active;
    float ElapsedTime;
    float LifeTime;
};

struct MeshVertex
{
    float3 Position;
    float3 Normal;
};

RWStructuredBuffer<Particle> _ParticleBuffer;
RWStructuredBuffer<MeshVertex> _MeshVertexBuffer;

int _StartIndex;
int _ToIndex;
float3 _TargetWorldPosition;
float _ParticleSpeed;

[numthreads(64,1,1)]
void CSMoveToMeshVertex(uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x;
    if (particleIndex >= _StartIndex && particleIndex <= _ToIndex)
    {
        int meshVertexIndex = particleIndex - _StartIndex;
        _ParticleBuffer[particleIndex].Position = _TargetWorldPosition + _MeshVertexBuffer[meshVertexIndex].Position;
        _ParticleBuffer[particleIndex].Velocity = _MeshVertexBuffer[meshVertexIndex].Normal * _ParticleSpeed;
        _ParticleBuffer[particleIndex].Active = 1.0f;
        _ParticleBuffer[particleIndex].ElapsedTime = 0.0f;
        _ParticleBuffer[particleIndex].LifeTime = 10.0f;
    }
}

float _DeltaTime;


[numthreads(64,1,1)]
void CSUpdate(uint3 id : SV_DispatchThreadID)
{
    int particleIndex = id.x;
    float3 pos = _ParticleBuffer[particleIndex].Position;
    float3 vel = _ParticleBuffer[particleIndex].Velocity;
    _ParticleBuffer[particleIndex].Position = pos + vel * _DeltaTime;
}
